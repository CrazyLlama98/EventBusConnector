# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: GitVersion@5
  inputs:
    runtime: 'core'
    preferBundledVersion: false
    updateAssemblyInfo: true
  displayName: 'GitVersion'

- script: echo %Action%%BuildVersion%
  displayName: 'Set build version'
  env:
    Action: '##vso[build.updatebuildnumber]'
    BuildVersion: $(GitVersion.SemVer)

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build $(buildConfiguration)'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test $(buildConfiguration)'
  inputs:
    command: 'test'
    projects: '**/*.Test.csproj'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'

- script: 'curl -s https://codecov.io/bash > codecov'
- script: 'chmod +x codecov'
- script: './codecov -f "./EventBusConnector.Test/coverage.opencover.xml" -t $(Codecov_apikey)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack' 
  inputs: 
    command: pack
    packagesToPack: '**/*.csproj;!**/*.Test.csproj' 
    nobuild: true 
    versioningScheme: byEnvVar 
    versionEnvVar: GitVersion.NuGetVersion

- task: NuGetCommand@2
  displayName: 'nuget push'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: external
    publishFeedCredentials: 'Nuget org'
    versioningScheme: 'off'
    allowPackageConflicts: true